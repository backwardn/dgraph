invalid_schems:
  -
    name: "More than 1 ID field"
    input: |
      type T {
        id: ID!
        id2: ID!
      }
    output: [
      {"message":"More than one ID field found for type Person",
       "locations":[{"line":3,"column":3}]}]

  -
    name: "Query or Mutation in initial schema"
    input: |
      type Query {
        q(id: ID): T!
      }
      type Mutation {
        ...
      }
    output: [
      {"message":"Only type and enums are allowed in initial schema.",
       "locations":[{"line":1,"column":6}]},
      {"message":"Query is reserved keyword. You can't declare type with this name",
       "locations":[{"line":1,"column":6}]}]

  -
    name: "Invalid list type"
    input: |
      type T {
        posts: [R]!
      }
    output: [{"message":"[Post]! type of lists are invalid","locations":[{"line":4,"column":3}]}]

  -
    name: "Scalar in initial schema"
    input: |
      scalar S
    output: [{"message":"Only type and enums are allowed in initial schema.","locations":[{"line":1,"column":8}]},{"message":"Int is reserved keyword. You can't declare type with this name","locations":[{"line":1,"column":8}]}]

  -
    name: "Invalid argument to hasInverse"
    input: |
      type T {
        posts: [R!]! @hasInverse(fields: "R.f")
      }
    output: [{"message":"Invalid argument to hasInverse","locations":[{"line":4,"column":31}]}]

  -
    name: "Unsupported Directive"
    input: |
      type Author {
        posts: [Post!]! @hasNothing(field: "Post.author")
      }
    output: [{"message":"Unsupported directive @hasNothing","locations":[{"line":4,"column":20}]}]

  -
    name: "Directive on wrong field"
    input: |
      type Post {
        id: ID!
        title: String!
        text: String
        author: Author!
        postType: PostType!
      }
      type Author {
        id: ID!
        name: String!
        posts: [Post!]!
        friends: [Author!]! @hasInverse(field: "Post.author")
      }
    output: [{"message":"Inverse link doesn't exists for Author.friends and Post.author"}]

  -
    name: "No reverse link to Author.posts"
    input: |
      type Post {
        id: ID!
        title: String!
        text: String
        author: Author!
        postType: PostType!
      }
      type Author {
        id: ID!
        name: String!
        posts: [Post!]! @hasInverse(field: "Post.author")
        friends: [Author!]!
      }
    output: [{"message":"Inverse link doesn't exists for Author.posts and Post.author"}]
